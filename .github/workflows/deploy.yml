name: Multicloud Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy_aws:
    runs-on: ubuntu-latest
    environment: aws
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up SSH key
      env:
        SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_KEY" > ~/.ssh/2024.pem
        chmod 600 ~/.ssh/2024.pem

    - name: Verify SSH key permissions and path
      run: |
          ls -l ~/.ssh/
          chmod 600 ~/.ssh/2024.pem  # Ensure the key has correct permissions
          ssh-keygen -y -f ~/.ssh/2024.pem  # This checks if the private key format is valid without printing it
     

    - name: Set AWS credentials
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> $GITHUB_ENV
        export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        export AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}
        
    # - name: Install AWS CLI
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y awscli

    # - name: Configure AWS CLI
    #   run: aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID && aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY && aws configure set default.region $AWS_REGION

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0
    - name: List files in the working directory
      run: ls -R ${{ github.workspace }}/aws
      

    - name: Initialize Terraform for aws
      working-directory: ${{ github.workspace }}/aws
      run: terraform init
      # env:
      #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Plan Terraform changes
      working-directory: ${{ github.workspace }}/aws
      run: terraform plan -out=tfplan

    # Add a prompt to ask the user whether to apply or destroy changes
    - name: Apply Terraform changes
      working-directory: ${{ github.workspace }}/aws
      run: terraform apply --auto-approve

    - name: Clean up
      working-directory: ${{ github.workspace }}/aws
      run: rm tfplan

  deploy_azure:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3


    - name: Set up SSH key
      env:
        SSH_KEY: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_KEY" > ~/.ssh/2024.pem
        chmod 600 ~/.ssh/2024.pem  
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.6

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set Azure Environment Variables
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      run: |
        echo "Setting Azure environment variables..."
        echo "ARM_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')" >> $GITHUB_ENV
        echo "ARM_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientSecret')" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')" >> $GITHUB_ENV

    # - name: List files in the working directory
    #   run: ls -R ${{ github.workspace }}/azure

    - name: Initialize Terraform
      working-directory: ${{ github.workspace }}/azure
      run: terraform init

    - name: Plan Terraform deployment
      working-directory: ${{ github.workspace }}/azure
      run: 
        terraform plan -out tfplan -lock=false 

    - name: Apply Terraform deployment
      working-directory: ${{ github.workspace }}/azure
      run: terraform apply -auto-approve -lock=false

    - name: Clean up
      working-directory: ${{ github.workspace }}/azure
      run: rm tfplan